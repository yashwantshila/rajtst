rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Admin collection rules
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Content collection rules
    match /content/{documentId} {
      allow read: if true;  // Anyone can read content
      allow write: if isAdmin();  // Only admins can write content
    }
    
    // User collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (userId == request.auth.uid || isAdmin());
      allow write: if isAuthenticated() && 
        userId == request.auth.uid;
    }
    
    // Balance collection rules
    match /balances/{userId} {
      allow read: if isAuthenticated() && 
        (userId == request.auth.uid || isAdmin());
      allow write: if isAdmin();
    }
    
    // Withdrawal collection rules
    match /withdrawals/{withdrawalId} {
      allow read: if isAuthenticated() && 
        ((resource.data.userId == request.auth.uid) || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
      allow list: if isAuthenticated();
    }
    
    // Quiz categories can be read by all authenticated users
    match /quiz-categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Quizzes can be read by all authenticated users
    match /quizzes/{quizId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Questions can be read by authenticated users
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // User quiz attempts should only be readable/writable by the user who took the quiz or admins
    match /quiz-attempts/{attemptId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }

    // Mega Tests collection rules
    match /mega-tests/{megaTestId} {
      // Anyone can read mega tests
      allow read: if true;
      
      // Only admins can create/update/delete mega tests
      allow write: if isAdmin();
      
      // Questions subcollection
      match /questions/{questionId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }
      
      // Participants subcollection
      match /participants/{userId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          userId == request.auth.uid &&
          exists(/databases/$(database)/documents/mega-tests/$(megaTestId)) &&
          get(/databases/$(database)/documents/mega-tests/$(megaTestId)).data.status == 'registration';
      }
      
      // Leaderboard subcollection - anyone can read
      match /leaderboard/{userId} {
        allow read: if true;
        allow create, update: if isAuthenticated() && 
          userId == request.auth.uid &&
          exists(/databases/$(database)/documents/mega-tests/$(megaTestId)) &&
          get(/databases/$(database)/documents/mega-tests/$(megaTestId)).data.status == 'ongoing' &&
          exists(/databases/$(database)/documents/mega-tests/$(megaTestId)/participants/$(request.auth.uid)) &&
          !exists(/databases/$(database)/documents/mega-tests/$(megaTestId)/leaderboard/$(request.auth.uid));
      }

      // Prizes subcollection - anyone can read, only admins can write
      match /prizes/{prizeId} {
        allow read: if true;
        allow write: if isAdmin();
      }

      // Prize claims subcollection
      match /prize-claims/{claimId} {
        allow read: if isAuthenticated() && 
          (request.auth.uid == resource.data.userId || isAdmin());
        allow create: if isAuthenticated() && 
          exists(/databases/$(database)/documents/mega-tests/$(megaTestId)) &&
          get(/databases/$(database)/documents/mega-tests/$(megaTestId)).data.status == 'completed';
        allow update, delete: if isAdmin();
      }
    }
  }
}
