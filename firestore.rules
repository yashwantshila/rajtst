rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.role == 'admin' || 
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    function isCurrentUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isUserVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    function hasUserDocument() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Debug logging function
    function debug(message) {
      return true;
    }
    
    // Resource validation functions
    function isValidUserData(data) {
      return data.email is string && 
             data.email.matches('^[^@]+@gmail\\.com$') && 
             data.username is string && 
             data.username.size() >= 3 &&
             data.createdAt is string;
    }
    
    
    function isValidWithdrawal(data) {
      return data.userId is string && 
             data.userId == request.auth.uid &&
             data.amount is number && 
             data.amount >= 50 && 
             data.upiId is string && 
             data.upiId.size() >= 5 &&
             data.status is string &&
             ['pending', 'completed', 'rejected'].hasAny([data.status]) &&
             data.requestDate is string;
    }
    
    function isValidQuizResult(data) {
      return data.userId is string && 
             data.userId == request.auth.uid &&
             data.score is number && 
             data.score >= 0 &&
             data.totalQuestions is number && 
             data.totalQuestions > 0 &&
             data.completedAt is string;
    }
    
    // Rate limiting functions
    function notTooManyRequests() {
      return request.time > resource.data.lastWithdrawalRequest + duration.value(24, 'h') ||
        !('lastWithdrawalRequest' in resource.data);
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Balance collection rules
    match /balance/{userId} {
      allow read: if isCurrentUser(userId) || isAdmin();
      allow write: if isAdmin();
    }
    
    // Withdrawals collection rules
    match /withdrawals/{withdrawalId} {
      allow read, write: if isAuthenticated();
    }
    
    // Quiz categories
    match /quiz-categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Quizzes
    match /quizzes/{quizId} {
      allow read: if true;
      allow write: if isAdmin();
      
      // Quiz questions
      match /questions/{questionId} {
        allow read: if true;
        allow write: if isAdmin();
      }
      
      // Quiz results
      match /results/{resultId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Mega tests
    match /mega-tests/{megaTestId} {
      allow read: if true;
      allow write: if isAdmin();
      
      // Mega test questions
      match /questions/{questionId} {
        allow read: if true;
        allow write: if isAdmin();
      }
      
      // Mega test participants
      match /participants/{userId} {
        allow read, write: if isAuthenticated();
      }
      
      // Mega test results
      match /results/{resultId} {
        allow read, write: if isAuthenticated();
      }
      
      // Mega test leaderboard
      match /leaderboard/{userId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
      
      // Mega test prize-claims
      match /prize-claims/{claimId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
      
      // Mega test prizes
      match /prizes/{prizeId} {
        allow read: if true;
        allow write: if isAdmin();
      }
    }
    
    // Prize collection
    match /prizes/{prizeId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Submissions collection 
    match /submissions/{submissionId} {
      allow read, write: if isAuthenticated();
    }
    
    // Paid content collection
    match /paid-content/{contentId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Purchased content collection
    match /purchased-content/{userId}/{contentId} {
      allow read: if isCurrentUser(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update, delete: if isAdmin();
    }
    
    // Question papers collection
    match /question-papers/{paperId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        exists(/databases/$(database)/documents/purchased-content/$(request.auth.uid)/$(paperId))
      );
      allow write: if isAdmin();
    }
    
    // Default - restrict both read and write
    match /{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}